diff --git a/dist/autocomplete.js b/dist/autocomplete.js
index 5458ba7c993d7c19b444df20a1e3b83b114e2241..cc3ad87cc0035094efa210c1a21a25ee06fe61f6 100644
--- a/dist/autocomplete.js
+++ b/dist/autocomplete.js
@@ -87,6 +87,7 @@ function useAutocomplete(originalProps) {
     errorMessage,
     onOpenChange,
     onClose,
+    onClear,
     isReadOnly = false,
     ...otherProps
   } = props;
@@ -216,12 +217,29 @@ function useAutocomplete(originalProps) {
     }
   }, [inputRef.current]);
   (0, import_react.useEffect)(() => {
-    let key = state.collection.getFirstKey();
-    while (key && state.disabledKeys.has(key)) {
-      key = state.collection.getKeyAfter(key);
+    let keyToFocus;
+    if (state.selectedKey !== null && state.collection.getItem(state.selectedKey) && !state.disabledKeys.has(state.selectedKey)) {
+      keyToFocus = state.selectedKey;
+    } else {
+      let firstAvailableKey = state.collection.getFirstKey();
+      while (firstAvailableKey && state.disabledKeys.has(firstAvailableKey)) {
+        firstAvailableKey = state.collection.getKeyAfter(firstAvailableKey);
+      }
+      keyToFocus = firstAvailableKey;
+    }
+    state.selectionManager.setFocusedKey(keyToFocus);
+  }, [state.collection, state.disabledKeys, state.selectedKey]);
+  (0, import_react.useEffect)(() => {
+    if (state.isOpen && popoverRef.current && listBoxRef.current) {
+      let selectedItem = listBoxRef.current.querySelector("[aria-selected=true] [data-label=true]");
+      let scrollShadow = scrollShadowRef.current;
+      if (selectedItem && scrollShadow && selectedItem.parentElement) {
+        let scrollShadowRect = scrollShadow == null ? void 0 : scrollShadow.getBoundingClientRect();
+        let scrollShadowHeight = scrollShadowRect.height;
+        scrollShadow.scrollTop = selectedItem.parentElement.offsetTop - scrollShadowHeight / 2 + selectedItem.parentElement.clientHeight / 2;
+      }
     }
-    state.selectionManager.setFocusedKey(key);
-  }, [state.collection, state.disabledKeys]);
+  }, [state.isOpen, disableAnimation]);
   (0, import_react.useEffect)(() => {
     if (isOpen) {
       if (popoverRef.current && inputWrapperRef.current) {
@@ -283,6 +301,7 @@ function useAutocomplete(originalProps) {
         }
         state.setInputValue("");
         state.open();
+        onClear?.();
       },
       "data-visible": !!state.selectedItem || ((_a2 = state.inputValue) == null ? void 0 : _a2.length) > 0,
       className: slots.clearButton({
diff --git a/dist/chunk-QZCVHGAT.mjs b/dist/chunk-QZCVHGAT.mjs
index f54795f69c1f19e73f04e22b19be8cd2c431fa67..d792df5e958b49603fd12ccab4f18136c75a39e1 100644
--- a/dist/chunk-QZCVHGAT.mjs
+++ b/dist/chunk-QZCVHGAT.mjs
@@ -54,6 +54,7 @@ function useAutocomplete(originalProps) {
     errorMessage,
     onOpenChange,
     onClose,
+    onClear,
     isReadOnly = false,
     ...otherProps
   } = props;
@@ -183,12 +184,29 @@ function useAutocomplete(originalProps) {
     }
   }, [inputRef.current]);
   useEffect(() => {
-    let key = state.collection.getFirstKey();
-    while (key && state.disabledKeys.has(key)) {
-      key = state.collection.getKeyAfter(key);
+    let keyToFocus;
+    if (state.selectedKey !== null && state.collection.getItem(state.selectedKey) && !state.disabledKeys.has(state.selectedKey)) {
+      keyToFocus = state.selectedKey;
+    } else {
+      let firstAvailableKey = state.collection.getFirstKey();
+      while (firstAvailableKey && state.disabledKeys.has(firstAvailableKey)) {
+        firstAvailableKey = state.collection.getKeyAfter(firstAvailableKey);
+      }
+      keyToFocus = firstAvailableKey;
+    }
+    state.selectionManager.setFocusedKey(keyToFocus);
+  }, [state.collection, state.disabledKeys, state.selectedKey]);
+  useEffect(() => {
+    if (state.isOpen && popoverRef.current && listBoxRef.current) {
+      let selectedItem = listBoxRef.current.querySelector("[aria-selected=true] [data-label=true]");
+      let scrollShadow = scrollShadowRef.current;
+      if (selectedItem && scrollShadow && selectedItem.parentElement) {
+        let scrollShadowRect = scrollShadow == null ? void 0 : scrollShadow.getBoundingClientRect();
+        let scrollShadowHeight = scrollShadowRect.height;
+        scrollShadow.scrollTop = selectedItem.parentElement.offsetTop - scrollShadowHeight / 2 + selectedItem.parentElement.clientHeight / 2;
+      }
     }
-    state.selectionManager.setFocusedKey(key);
-  }, [state.collection, state.disabledKeys]);
+  }, [state.isOpen, disableAnimation]);
   useEffect(() => {
     if (isOpen) {
       if (popoverRef.current && inputWrapperRef.current) {
@@ -250,6 +268,7 @@ function useAutocomplete(originalProps) {
         }
         state.setInputValue("");
         state.open();
+        onClear?.();
       },
       "data-visible": !!state.selectedItem || ((_a2 = state.inputValue) == null ? void 0 : _a2.length) > 0,
       className: slots.clearButton({
diff --git a/dist/index.js b/dist/index.js
index 7ffc5983a0132b2178ebe4ca2187bc8ab67f4e6b..5b83d330e810d6883cef466cbe016e2f55df92d2 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -93,6 +93,7 @@ function useAutocomplete(originalProps) {
     errorMessage,
     onOpenChange,
     onClose,
+    onClear,
     isReadOnly = false,
     ...otherProps
   } = props;
@@ -222,12 +223,29 @@ function useAutocomplete(originalProps) {
     }
   }, [inputRef.current]);
   (0, import_react.useEffect)(() => {
-    let key = state.collection.getFirstKey();
-    while (key && state.disabledKeys.has(key)) {
-      key = state.collection.getKeyAfter(key);
+    let keyToFocus;
+    if (state.selectedKey !== null && state.collection.getItem(state.selectedKey) && !state.disabledKeys.has(state.selectedKey)) {
+      keyToFocus = state.selectedKey;
+    } else {
+      let firstAvailableKey = state.collection.getFirstKey();
+      while (firstAvailableKey && state.disabledKeys.has(firstAvailableKey)) {
+        firstAvailableKey = state.collection.getKeyAfter(firstAvailableKey);
+      }
+      keyToFocus = firstAvailableKey;
+    }
+    state.selectionManager.setFocusedKey(keyToFocus);
+  }, [state.collection, state.disabledKeys, state.selectedKey]);
+  (0, import_react.useEffect)(() => {
+    if (state.isOpen && popoverRef.current && listBoxRef.current) {
+      let selectedItem = listBoxRef.current.querySelector("[aria-selected=true] [data-label=true]");
+      let scrollShadow = scrollShadowRef.current;
+      if (selectedItem && scrollShadow && selectedItem.parentElement) {
+        let scrollShadowRect = scrollShadow == null ? void 0 : scrollShadow.getBoundingClientRect();
+        let scrollShadowHeight = scrollShadowRect.height;
+        scrollShadow.scrollTop = selectedItem.parentElement.offsetTop - scrollShadowHeight / 2 + selectedItem.parentElement.clientHeight / 2;
+      }
     }
-    state.selectionManager.setFocusedKey(key);
-  }, [state.collection, state.disabledKeys]);
+  }, [state.isOpen, disableAnimation]);
   (0, import_react.useEffect)(() => {
     if (isOpen) {
       if (popoverRef.current && inputWrapperRef.current) {
@@ -289,6 +307,7 @@ function useAutocomplete(originalProps) {
         }
         state.setInputValue("");
         state.open();
+        onClear?.();
       },
       "data-visible": !!state.selectedItem || ((_a2 = state.inputValue) == null ? void 0 : _a2.length) > 0,
       className: slots.clearButton({
diff --git a/dist/use-autocomplete.d.ts b/dist/use-autocomplete.d.ts
index b67a788f8919ace339e89326cff3eed90e7f5273..23b12163a4028613be6d77fad2b8f4015dfacc35 100644
--- a/dist/use-autocomplete.d.ts
+++ b/dist/use-autocomplete.d.ts
@@ -105,6 +105,11 @@ interface Props<T> extends Omit<HTMLHeroUIProps<"input">, keyof ComboBoxProps<T>
      * Callback fired when the select menu is closed.
      */
     onClose?: () => void;
+    /**
+     * Callback fired when the value is cleared.
+     * if you pass this prop, the clear button will be shown.
+     */
+    onClear?: () => void;
     /**
      * Whether to enable virtualization of the listbox items.
      * By default, virtualization is automatically enabled when the number of items is greater than 50.
diff --git a/dist/use-autocomplete.js b/dist/use-autocomplete.js
index e644781853f6341121165125832f86e9996c69e4..e21f29f38747197cb4adc52e524b7e61c9868165 100644
--- a/dist/use-autocomplete.js
+++ b/dist/use-autocomplete.js
@@ -77,6 +77,7 @@ function useAutocomplete(originalProps) {
     errorMessage,
     onOpenChange,
     onClose,
+    onClear,
     isReadOnly = false,
     ...otherProps
   } = props;
@@ -206,12 +207,29 @@ function useAutocomplete(originalProps) {
     }
   }, [inputRef.current]);
   (0, import_react.useEffect)(() => {
-    let key = state.collection.getFirstKey();
-    while (key && state.disabledKeys.has(key)) {
-      key = state.collection.getKeyAfter(key);
+    let keyToFocus;
+    if (state.selectedKey !== null && state.collection.getItem(state.selectedKey) && !state.disabledKeys.has(state.selectedKey)) {
+      keyToFocus = state.selectedKey;
+    } else {
+      let firstAvailableKey = state.collection.getFirstKey();
+      while (firstAvailableKey && state.disabledKeys.has(firstAvailableKey)) {
+        firstAvailableKey = state.collection.getKeyAfter(firstAvailableKey);
+      }
+      keyToFocus = firstAvailableKey;
+    }
+    state.selectionManager.setFocusedKey(keyToFocus);
+  }, [state.collection, state.disabledKeys, state.selectedKey]);
+  (0, import_react.useEffect)(() => {
+    if (state.isOpen && popoverRef.current && listBoxRef.current) {
+      let selectedItem = listBoxRef.current.querySelector("[aria-selected=true] [data-label=true]");
+      let scrollShadow = scrollShadowRef.current;
+      if (selectedItem && scrollShadow && selectedItem.parentElement) {
+        let scrollShadowRect = scrollShadow == null ? void 0 : scrollShadow.getBoundingClientRect();
+        let scrollShadowHeight = scrollShadowRect.height;
+        scrollShadow.scrollTop = selectedItem.parentElement.offsetTop - scrollShadowHeight / 2 + selectedItem.parentElement.clientHeight / 2;
+      }
     }
-    state.selectionManager.setFocusedKey(key);
-  }, [state.collection, state.disabledKeys]);
+  }, [state.isOpen, disableAnimation]);
   (0, import_react.useEffect)(() => {
     if (isOpen) {
       if (popoverRef.current && inputWrapperRef.current) {
@@ -273,6 +291,7 @@ function useAutocomplete(originalProps) {
         }
         state.setInputValue("");
         state.open();
+        onClear?.();
       },
       "data-visible": !!state.selectedItem || ((_a2 = state.inputValue) == null ? void 0 : _a2.length) > 0,
       className: slots.clearButton({
